type BlockRef {
	name: String!
	blockHash: Sha3256!
}
type DataSchema {
	format: DataSchemaFormat!
	content: String!
}
enum DataSchemaFormat {
	PARQUET
	PARQUET_JSON
}
type DataSlice {
	format: DataSliceFormat!
	content: String!
}
enum DataSliceFormat {
	JSON
	JSON_LD
	JSON_SO_A
	CSV
}
type Dataset {
	datasetId: DatasetID!
	id: DatasetID!
	"""
	Returns the kind of a dataset (Root or Derivative)
	"""
	kind: DatasetKind!
	"""
	Access to the data of the dataset
	"""
	data: DatasetData!
	"""
	Access to the metadata of the dataset
	"""
	metadata: DatasetMetadata!
	"""
	Creation time of the first metadata block in the chain
	"""
	createdAt: DateTime!
	"""
	Creation time of the most recent metadata block in the chain
	"""
	lastUpdatedAt: DateTime!
}
type DatasetConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [DatasetEdge]
}
type DatasetData {
	datasetId: DatasetID!
	"""
	Total number of records in this dataset
	"""
	numRecordsTotal: Int!
	"""
	An estimated size of data on disk not accounting for replication or caching
	"""
	estimatedSize: Int!
	"""
	Returns the specified number of the latest records in the dataset
	This is equivalent to the SQL query: `SELECT * FROM dataset ORDER BY event_time DESC LIMIT N`
	"""
	tail(numRecords: Int, format: DataSliceFormat): DataSlice!
}
"""
An edge in a connection.
"""
type DatasetEdge {
	"""
	The item at the end of the edge
	"""
	node: Dataset!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}
scalar DatasetID
enum DatasetKind {
	ROOT
	DERIVATIVE
}
type DatasetMetadata {
	datasetId: DatasetID!
	"""
	Access to the temporal metadata chain of the dataset
	"""
	chain: MetadataChain!
	"""
	Last recorded watermark
	"""
	currentWatermark: DateTime
	"""
	Latest data schema
	"""
	currentSchema(format: DataSchemaFormat): DataSchema!
	"""
	Current upstream dependencies of a dataset
	"""
	currentUpstreamDependencies: [Dataset!]!
}
type Datasets {
	"""
	Returns dataset by its ID
	"""
	byId(id: DatasetID!): Dataset
	"""
	Iterates all datasets
	"""
	all(after: String, before: String, first: Int, last: Int): DatasetConnection!
}
"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime
type MetadataBlock {
	blockHash: Sha3256!
	prevBlockHash: Sha3256
	systemTime: DateTime!
	outputWatermark: DateTime
}
type MetadataBlockConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [MetadataBlockEdge]
}
"""
An edge in a connection.
"""
type MetadataBlockEdge {
	"""
	The item at the end of the edge
	"""
	node: MetadataBlock!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}
type MetadataChain {
	"""
	Returns all named metadata block references
	"""
	refs: [BlockRef!]!
	"""
	Returns a metadata block corresponding to the specified hash
	"""
	blockByHash(hash: Sha3256!): MetadataBlock
	"""
	Iterates all metadata blocks starting from the latest one
	"""
	blocks(after: String, before: String, first: Int, last: Int): MetadataBlockConnection!
}
"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}
type Query {
	"""
	Returns the version of the GQL API
	"""
	apiVersion: String!
	"""
	Dataset-related functionality group
	"""
	datasets: Datasets!
	"""
	Search-related functionality group
	"""
	search: Search!
}
type Search {
	"""
	Perform search across all resources
	"""
	query(after: String, before: String, first: Int, last: Int, query: String!): SearchQueryResultConnection!
}
union SearchQueryResult = | Dataset
type SearchQueryResultConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [SearchQueryResultEdge]
}
"""
An edge in a connection.
"""
type SearchQueryResultEdge {
	"""
	The item at the end of the edge
	"""
	node: SearchQueryResult!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}
scalar Sha3256
schema {
	query: Query
}
